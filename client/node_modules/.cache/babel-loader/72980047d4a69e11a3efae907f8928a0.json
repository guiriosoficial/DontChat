{"ast":null,"code":"var _jsxFileName = \"/Users/guiriosoficial/Documents/Sistemas/DontChat/Client/src/pages/chat/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { setUser } from '../../store/user';\nimport { setMessages } from '../../store/messages';\nimport { generateColor, generateName, validateColor, validateName } from '../../utils';\nimport SocketContext, { socket } from '../../socket';\nimport History from './history';\nimport Editor from './editor';\nimport axios from 'axios';\nimport './history.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat() {\n  _s();\n\n  const dispatch = useDispatch();\n  const roomPath = useLocation().pathname;\n  const {\n    user\n  } = useSelector(state => state);\n  const [userColor, setUserColor] = useState(user.userColor || generateColor());\n  const [errorMessage, setErrorMessage] = useState('');\n  const invalidNameMessage = 'Invalid name. Cannot be shorter than 3 or longer than 27 characters.';\n  const invalidColorMessage = 'Invalid color. Select a darker color.';\n\n  const handleChangeUserColor = async evt => {\n    const newColor = evt.target.value;\n\n    if (validateColor(newColor) && newColor !== user.userColor) {\n      setUserColor(newColor);\n      await putUser();\n    } else {\n      showErrorMessage(invalidColorMessage);\n    }\n  };\n\n  const handleChangeUserName = async () => {\n    const nickName = prompt('Please, insert a nickname:');\n\n    if (validateName(nickName) && nickName !== userName) {\n      await putUser(nickName);\n    } else if (nickName) {\n      showErrorMessage(invalidNameMessage);\n    }\n  };\n\n  const putUser = async function () {\n    let nickName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    await axios.put(`http://localhost:3001/users/${socket.id}?roomPath=${roomPath}`, {\n      userName: nickName.trim() || user.userName || generateName(),\n      userColor\n    }).then(_ref => {\n      let {\n        data\n      } = _ref;\n      return dispatch(setUser(data));\n    }).catch(_ref2 => {\n      let {\n        response: {\n          data\n        }\n      } = _ref2;\n      return showErrorMessage(data);\n    });\n  };\n\n  const joinRoomPath = () => {\n    if (user.socketId) {\n      socket.emit('joinRoomPath', roomPath, res => {\n        showErrorMessage(res);\n      });\n    }\n  };\n\n  const showErrorMessage = message => {\n    setErrorMessage(message);\n    setTimeout(() => {\n      setErrorMessage('');\n    }, 5000);\n  };\n\n  const updateSocketStatus = () => {\n    socket.on('connect', () => {\n      setErrorMessage('');\n    });\n    socket.on('disconnect', () => {\n      setErrorMessage('Not Connected. Trying to reconnect.');\n    });\n  };\n\n  useEffect(async () => {\n    setTimeout(async () => {\n      await putUser();\n      await axios.get(`http://localhost:3001/messages?roomPath=${roomPath}`).then(_ref3 => {\n        let {\n          data\n        } = _ref3;\n        return dispatch(setMessages(data));\n      }).catch(_ref4 => {\n        let {\n          response: {\n            data\n          }\n        } = _ref4;\n        return setErrorMessage(data);\n      });\n      joinRoomPath();\n      return () => socket.off('joinRoomPath', roomPath);\n    }, 300);\n  }, []);\n  useEffect(() => {\n    // joinRoomPath()\n    updateSocketStatus();\n  }, [socket.connected]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: socket,\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"chat\",\n      children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(History, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Click \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          onClick: handleChangeUserName,\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), \" to change your nickname!\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: userColor,\n          type: \"color\",\n          onChange: handleChangeUserColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"MJYe+sstX01S15dLQV3JhiaFNWE=\", false, function () {\n  return [useDispatch, useLocation, useSelector];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/guiriosoficial/Documents/Sistemas/DontChat/Client/src/pages/chat/index.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useLocation","setUser","setMessages","generateColor","generateName","validateColor","validateName","SocketContext","socket","History","Editor","axios","Chat","dispatch","roomPath","pathname","user","state","userColor","setUserColor","errorMessage","setErrorMessage","invalidNameMessage","invalidColorMessage","handleChangeUserColor","evt","newColor","target","value","putUser","showErrorMessage","handleChangeUserName","nickName","prompt","userName","put","id","trim","then","data","catch","response","joinRoomPath","socketId","emit","res","message","setTimeout","updateSocketStatus","on","get","off","connected"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { setUser } from '../../store/user'\nimport { setMessages } from '../../store/messages'\nimport { \n  generateColor,\n  generateName,\n  validateColor,\n  validateName\n} from '../../utils'\nimport SocketContext, { socket } from '../../socket'\nimport History from './history'\nimport Editor from './editor'\nimport axios from 'axios'\nimport './history.scss'\n\nfunction Chat() {\n  const dispatch = useDispatch()\n  const roomPath = useLocation().pathname\n  const { user } = useSelector((state) => state)\n  const [userColor, setUserColor] = useState(user.userColor || generateColor())\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const invalidNameMessage = 'Invalid name. Cannot be shorter than 3 or longer than 27 characters.'\n  const invalidColorMessage = 'Invalid color. Select a darker color.'\n\n  const handleChangeUserColor = async (evt) => {\n    const newColor = evt.target.value\n    \n    if (validateColor(newColor) && newColor !== user.userColor) {\n      setUserColor(newColor)\n      await putUser()\n    } else {\n      showErrorMessage(invalidColorMessage)\n    }\n  }\n\n  const handleChangeUserName = async () => {\n    const nickName = prompt('Please, insert a nickname:')\n\n    if (validateName(nickName) && nickName !== userName) {\n      await putUser(nickName)\n    } else if (nickName) {\n      showErrorMessage(invalidNameMessage)\n    }\n  }\n\n  const putUser = async (nickName = '') => {\n    await axios.put(`http://localhost:3001/users/${socket.id}?roomPath=${roomPath}`, {\n      userName: nickName.trim() || user.userName || generateName(),\n      userColor\n    })\n      .then(({ data }) => dispatch(setUser(data)))\n      .catch(({ response: { data } }) => showErrorMessage(data))\n  }\n\n  const joinRoomPath = () => {\n    if (user.socketId) {\n      socket.emit('joinRoomPath', roomPath, (res) => {\n        showErrorMessage(res)\n      })\n    }\n  }\n\n  const showErrorMessage = (message) => {\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage('')\n    }, 5000)\n  }\n\n  const updateSocketStatus = () => {\n    socket.on('connect', () => {\n      setErrorMessage('')\n    })\n    socket.on('disconnect', () => {\n      setErrorMessage('Not Connected. Trying to reconnect.')\n    })\n  }\n\n  useEffect(async() => {  \n    setTimeout(async() => {\n      await putUser()\n  \n      await axios.get(`http://localhost:3001/messages?roomPath=${roomPath}`)\n        .then(({ data }) => dispatch(setMessages(data)))\n        .catch(({ response: { data }}) => setErrorMessage(data))\n  \n      joinRoomPath()\n\n      return () => socket.off('joinRoomPath', roomPath)\n    }, 300)\n  }, [])\n    \n  useEffect(() => {\n    // joinRoomPath()\n    updateSocketStatus()\n  }, [socket.connected])\n\n  return (\n    <SocketContext.Provider value={socket}>\n      <main className=\"chat\">\n        {errorMessage && <div className=\"error\">{errorMessage}</div>}\n        <History />\n        <span>\n          Click <a href=\"#\" onClick={handleChangeUserName}>here</a> to change your nickname!\n          <input\n            value={userColor}\n            type=\"color\"\n            onChange={handleChangeUserColor}\n          />\n        </span>\n        <Editor />\n      </main>\n    </SocketContext.Provider>\n  )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}