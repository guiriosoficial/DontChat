{"ast":null,"code":"function generateName() {\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n  const generateLetter = () => letters[Math.floor(Math.random() * letters.length - 1)];\n\n  const generateConsoant = () => consonants[Math.floor(Math.random() * consonants.length - 1)];\n\n  const generateVowel = () => vowels[Math.floor(Math.random() * vowels.length - 1)];\n\n  let name = [];\n\n  const nameLength = () => name.length;\n\n  const lastLetter = () => name[nameLength() - 1];\n\n  const penultLetter = () => name[nameLength() - 2];\n\n  const max = 12;\n  const min = 3;\n  const size = Math.floor(Math.random() * (max - min) + min);\n\n  const generateString = () => {\n    name = [];\n\n    for (let i = 0; i <= size; i++) {\n      let current = generateLetter();\n\n      if (nameLength() >= 2) {\n        while (lastLetter() === current && penultLetter() === current) {\n          current = generateLetter();\n        }\n\n        if (consonants.includes(lastLetter()) && consonants.includes(penultLetter())) {\n          current = generateVowel();\n        }\n      } else {\n        if (vowels.includes(name[0])) {\n          current = generateConsoant();\n        } else if (consonants.includes(name[0])) {\n          current = generateVowel();\n        }\n      }\n\n      name[i] = current;\n    }\n\n    if (consonants.includes(lastLetter()) && consonants.includes(penultLetter())) {\n      name[nameLength() - 1] = generateVowel();\n    }\n\n    name = name.join('');\n    name = name.substr(0, 1).toUpperCase() + name.substr(1);\n    return name;\n  };\n\n  return `${generateString()} ${generateString()}`;\n}\n\nexport default generateName;","map":{"version":3,"sources":["/Users/guiriosoficial/Documents/Sistemas/DontChat/Client/src/utils/generateName.js"],"names":["generateName","letters","consonants","vowels","generateLetter","Math","floor","random","length","generateConsoant","generateVowel","name","nameLength","lastLetter","penultLetter","max","min","size","generateString","i","current","includes","join","substr","toUpperCase"],"mappings":"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","sourcesContent":["\nfunction generateName() {\n    const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    const generateLetter = () => letters[Math.floor(Math.random() * letters.length - 1)]\n    const generateConsoant = () => consonants[Math.floor(Math.random() * consonants.length - 1)]\n    const generateVowel = () => vowels[Math.floor(Math.random() * vowels.length - 1)]\n    \n    let name = []\n    \n    const nameLength = () => name.length\n    const lastLetter = () => name[nameLength() - 1]\n    const penultLetter = () =>  name[nameLength() - 2]\n    \n    const max = 12\n    const min = 3\n    const size = Math.floor(Math.random() * (max - min) + min)\n    \n    const generateString = () => {\n        name = []\n\n        for (let i = 0; i <= size; i++) {\n            let current = generateLetter()\n    \n            if (nameLength() >= 2) {\n                while (lastLetter() === current && penultLetter() === current) {\n                    current = generateLetter()\n                }\n    \n                if (consonants.includes(lastLetter()) && consonants.includes(penultLetter())) {\n                    current = generateVowel()\n                }\n            } else {\n                if (vowels.includes(name[0])) {\n                    current = generateConsoant()\n                } else if (consonants.includes(name[0])) {\n                    current = generateVowel()\n                }\n            }\n    \n            name[i] = current\n        }\n    \n        if (consonants.includes(lastLetter()) && consonants.includes(penultLetter())) {\n            name[nameLength() - 1] = generateVowel()\n        }\n    \n        name = name.join('')\n        name = name.substr(0, 1).toUpperCase() + name.substr(1)\n\n        return name\n    }\n    return `${generateString()} ${generateString()}`\n}\n\nexport default generateName\n"]},"metadata":{},"sourceType":"module"}